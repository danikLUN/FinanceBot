require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const cron = require('node-cron');
const db = require('./db');

const bot = new Telegraf(process.env.BOT_TOKEN);
const userStates = {};

const categories = ['–ï–¥–∞', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–û–¥–µ–∂–¥–∞', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–î—Ä—É–≥–æ–µ'];

function mainMenu() {
  return Markup.keyboard([
    ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É'],
    ['üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ', '‚ôªÔ∏è –°–±—Ä–æ—Å'],
    ['üíæ –≠–∫—Å–ø–æ—Ä—Ç', 'üí∞ –õ–∏–º–∏—Ç'],
    ['üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫']
  ]).resize();
}

bot.start((ctx) => {
  userStates[ctx.from.id] = {};
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', mainMenu());
});

bot.hears('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫', (ctx) => {
  userStates[ctx.from.id] = {};
  ctx.reply('–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω', mainMenu());
});

bot.hears('üí∞ –õ–∏–º–∏—Ç', (ctx) => {
  userStates[ctx.from.id] = { stage: 'awaiting_limit' };
  ctx.reply('–í–≤–µ–¥–∏ –ª–∏–º–∏—Ç –Ω–∞ –¥–µ–Ω—å –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500):');
});

bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É', (ctx) => {
  userStates[ctx.from.id] = { stage: 'awaiting_category' };
  ctx.reply('–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', Markup.keyboard(categories).resize());
});

bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', (ctx) => {
  const userId = ctx.from.id;
  db.getCategoryStats(userId, (rows) => {
    if (!rows.length) return ctx.reply('–£ —Ç–µ–±—è –Ω–µ—Ç —Ç—Ä–∞—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    const stats = rows.map(r => `${r.category}: ${r.total}‚ÇΩ`).join('\n');
    ctx.reply(`üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n${stats}`);
  });
});

bot.hears('üíæ –≠–∫—Å–ø–æ—Ä—Ç', (ctx) => {
  const userId = ctx.from.id;
  db.getExpenses(userId, (rows) => {
    if (!rows.length) return ctx.reply('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.');
    const content = rows.map(e => `${e.timestamp} - ${e.category}: ${e.amount}‚ÇΩ`).join('\n');
    require('fs').writeFileSync(`export_${userId}.txt`, content);
    ctx.replyWithDocument({ source: `export_${userId}.txt` });
  });
});

bot.hears('üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ', (ctx) => {
  userStates[ctx.from.id] = { stage: 'awaiting_filter_choice' };
  ctx.reply('–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥:', Markup.keyboard([
    ['–°–µ–≥–æ–¥–Ω—è', '–ù–µ–¥–µ–ª—è', '–ú–µ—Å—è—Ü'],
    ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
  ]).resize());
});

bot.on('text', (ctx) => {
  const userId = ctx.from.id;
  const text = ctx.message.text;
  const state = userStates[userId] || {};

  if (state.stage === 'awaiting_limit') {
    const limit = parseFloat(text.replace(',', '.'));
    if (isNaN(limit)) {
      ctx.reply('–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏ –ª–∏–º–∏—Ç —Å–Ω–æ–≤–∞:');
    } else {
      db.setDailyLimit(userId, limit);
      userStates[userId] = {};
      ctx.reply(`–õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${limit}‚ÇΩ –≤ –¥–µ–Ω—å`, mainMenu());
    }
    return;
  }

  if (state.stage === 'awaiting_filter_choice') {
    if (text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
      userStates[userId] = {};
      return ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.', mainMenu());
    }

    let period = '';
    if (text === '–°–µ–≥–æ–¥–Ω—è') period = 'day';
    else if (text === '–ù–µ–¥–µ–ª—è') period = 'week';
    else if (text === '–ú–µ—Å—è—Ü') period = 'month';
    else return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.');

    db.getFilteredExpenses(userId, period, (rows) => {
      if (!rows.length) return ctx.reply('–ù–µ—Ç —Ç—Ä–∞—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.');
      const list = rows.map((e, i) => `${i + 1}. ${e.timestamp.split('T')[0]} ‚Äî ${e.category}: ${e.amount}‚ÇΩ`).join('\n');
      ctx.reply(`–¢–≤–æ–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ ¬´${text}¬ª:\n\n${list}`, mainMenu());
    });
    userStates[userId] = {};
    return;
  }

  if (state.stage === 'awaiting_category' && categories.includes(text)) {
    state.category = text;
    state.stage = 'awaiting_amount';
    ctx.reply(`–í–≤–µ–¥–∏ —Å—É–º–º—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${text}":`);
  } else if (state.stage === 'awaiting_amount') {
    const amount = parseFloat(text.replace(',', '.'));
    if (isNaN(amount)) {
      ctx.reply('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.');
    } else {
      state.amount = amount;
      state.stage = 'awaiting_confirmation';
      ctx.reply(
        `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —Ç—Ä–∞—Ç—É: ${state.category} ‚Äî ${amount}‚ÇΩ`,
        Markup.keyboard(['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∞']).resize()
      );
    }
  } else if (state.stage === 'awaiting_confirmation') {
    if (text === '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å') {
      db.addExpense(userId, state.category, state.amount);
      userStates[userId] = {};

      db.getDailyLimit(userId, (limit) => {
        db.getTodayTotal(userId, (total) => {
          let message = '–¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!';
          if (limit > 0 && total > limit) {
            message += ` ‚ö†Ô∏è –¢—ã –ø—Ä–µ–≤—ã—Å–∏–ª –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: ${total}‚ÇΩ / ${limit}‚ÇΩ`;
          }
          ctx.reply(message, mainMenu());
        });
      });
    } else if (text === '‚ùå –û—Ç–º–µ–Ω–∞') {
      userStates[userId] = {};
      ctx.reply('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.', mainMenu());
    }
  } else if (text === 'üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞—Ç—ã') {
    db.getExpenses(userId, (rows) => {
      if (!rows.length) return ctx.reply('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞—Ç.');
      const list = rows.map((e, i) => `${i + 1}. ${e.category} ‚Äî ${e.amount}‚ÇΩ`).join('\n');
      ctx.reply(`–¢–≤–æ–∏ —Ç—Ä–∞—Ç—ã:\n\n${list}`);
    });
  } else if (text === '‚ôªÔ∏è –°–±—Ä–æ—Å') {
    db.resetExpenses(userId);
    ctx.reply('–í—Å–µ —Ç—Ä–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã.');
  }
});

cron.schedule('0 12 * * *', () => {
  console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  for (const userId in userStates) {
    db.getLastExpenseDate(userId, (last) => {
      if (!last) return;
      const lastDate = new Date(last);
      const now = new Date();
      const diffDays = Math.floor((now - lastDate) / (1000 * 60 * 60 * 24));
      if (diffDays >= 2) {
        bot.telegram.sendMessage(userId, 'üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ç—ã –Ω–µ –≤–Ω–æ—Å–∏–ª —Ç—Ä–∞—Ç—ã —É–∂–µ 2 –¥–Ω—è!');
      }
    });
  }
});

bot.launch();